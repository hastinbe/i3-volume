#!/bin/bash
#
#  i3-volume
#
#  Volume control and volume notifications for i3wm.
#
#  Requires:
#    alsa-utils or pulseaudio-utils
#    awk (POSIX compatible)
#
#  Optional:
#    A libnotify compatible notification daemon such as notify-osd or dunst
#    notify-send (libnotify) or dunstify (dunst)
#
#  Copyright (c) 2016 Beau Hastings. All rights reserved.
#  License: GNU General Public License v2
#
#  Author: Beau Hastings <beau@saweet.net>
#  URL: https://github.com/hastinbe/i3-volume

# Get default sink name
get_default_sink_name() {
    pacmd stat | awk -F": " '/^Default sink name: /{print $2}'
}

# Get the volume as a percentage.
get_volume() {
    if $opt_use_amixer; then
        get_volume_amixer $card
    else
        get_volume_pulseaudio $sink
    fi
}

# Get the volume as a percentage.
#
# Arguments
#   Sink name   (string) Symbolic name of sink.
get_volume_pulseaudio() {
    local sink="$1"

    pacmd list-sinks |
        awk -W posix '/^[ \t]+name: /{insink = $2 == "<'$sink'>"}
                      /^[ \t]+volume: / && insink {gsub("%,?", ""); print $5; exit}'
}

# Get the volume as a percentage.
#
# Arguments
#   Card        (integer) Card number to control.
get_volume_amixer() {
    local card="$1"
    local volume

    if [ -n "$card" ]; then
        volume=$(amixer -c "$card" -- sget $mixer)
    else
        volume=$(amixer sget $mixer)
    fi

    echo $volume | awk -W posix -F'[][]' '/dB/ { gsub("%", ""); print $2 }'
}

# Get the max volume as a percentage.
#
# Arguments
#   Sink name   (string) Symbolic name of sink.
get_base_volume_pulseaudio() {
    local sink="$1"

    pacmd list-sinks |
        awk -W posix '/^[ \t]+name: /{insink = $2 == "<'$sink'>"}
                      /^[ \t]+base volume: / && insink {gsub("%", ""); print $5; exit}'
}

# Increase volume relative to current volume.
#
# Arguments:
#   Step        (integer) Percentage to increase by.
#   Max Volume  (optional) (integer|percentage) Maximum volume limit.
raise_volume() {
    local max_vol="$2"

    if [ -n "$max_vol" ]; then
        local vol=$(get_volume)

        if [ "$vol" -ge "$max_vol" ]; then
            return
        fi
    fi

    if $opt_use_amixer; then
        raise_volume_amixer "$card" "$1"
    else
        raise_volume_pulseaudio "$sink" "$1"
    fi
}

# Increase volume relative to current volume using pulseaudio.
#
# Arguments:
#   Sink name   (string)  Symbolic name of sink.
#   Step        (integer) Percentage to increase by.
raise_volume_pulseaudio() {
    local sink="$1"
    local step="${2:-5}"

    set_volume_pulseaudio "$sink" "+${step}%"
}

# Increase volume relative to current volume using amixer.
#
# Arguments:
#   Card        (integer) Card number to control.
#   Step        (integer) Percentage to increase by.
raise_volume_amixer() {
    local card="$1"
    local step="${2:-5}"

    set_volume_amixer "$card" "${step}%+"
}

# Decrease volume relative to current volume.
#
# Arguments:
#   Step        (integer) Percentage to decrease by.
lower_volume() {
    if $opt_use_amixer; then
        lower_volume_amixer "$card" "$1"
    else
        lower_volume_pulseaudio "$sink" "$1"
    fi
}

# Decrease volume relative to current volume using pulseaudio.
#
# Arguments:
#   Sink name   (string)  Symbolic name of sink.
#   Step        (integer|percentage) Percentage to decrease by.
lower_volume_pulseaudio() {
    local sink="$1"
    local step="${2:-5}"

    set_volume_pulseaudio "$sink" "-${step}%"
}

# Decrease volume relative to current volume using amixer.
#
# Arguments:
#   Card        (integer) Card number to control.
#   Step        (integer) Percentage to decrease by.
lower_volume_amixer() {
    local card="$1"
    local step="${2:-5}"

    set_volume_amixer "$card" "${step}%-"
}

# Set volume.
#
# Arguments:
#   Step        (integer) Percentage to decrease by.
#   Max Volume  (optional) (integer|percentage) Maximum volume limit.
set_volume() {
    local max_vol="$2"

    if [ -n "$max_vol" ]; then
        local vol=$(get_volume)

        if [ "$vol" -ge "$max_vol" ]; then
            return
        fi
    fi

    if $opt_use_amixer; then
        set_volume_amixer "$card" "$1"
    else
        set_volume_pulseaudio "$sink" "$1"
    fi
}

# Set volume using pulseaudio.
#
# Arguments:
#   Sink name   (string) Symbolic name of sink.
#   Volume      (integer|linear factor|percentage|decibel)
set_volume_pulseaudio() {
    local sink="$1"
    local vol="$2"

    pactl set-sink-volume "$sink" "$vol" || pactl set-sink-volume "$sink" -- "$vol"
}

# Set volume using amixer.
#
# Arguments:
#   Card        (integer) Card number to control.
#   Volume      (integer|linear factor|percentage|decibel)
set_volume_amixer() {
    local card="$1"
    local vol="$2"

    if [ -n "$card" ]; then
        amixer -q -c "$card" -- set $mixer "$vol"
    else
        amixer -q set $mixer "$vol"
    fi
}

# Toggle mute.
toggle_mute() {
    if $opt_use_amixer; then
        toggle_mute_amixer "$card"
    else
        toggle_mute_pulseaudio "$sink"
    fi
}

# Toggle mute using pulseaudio.
#
# Arguments:
#   Sink name   (string) Symbolic name of sink.
toggle_mute_pulseaudio() {
    local sink="$1"

    pactl set-sink-mute "$sink" toggle
}

# Toggle mute using amixer.
#
# Arguments:
#   Card        (integer) Card number to control.
toggle_mute_amixer() {
    local card="$1"

    if [ -n "$card" ]; then
        amixer -q -c "$card" -- set $mixer toggle
    else
        amixer -q set $mixer toggle
    fi
}

# Check if muted.
is_muted() {
    if $opt_use_amixer; then
        return $(is_muted_amixer "$card")
    else
        return $(is_muted_pulseaudio "$sink")
    fi
}

# Check if sink is muted.
#
# Arguments:
#   Sink name    (string) Symbolic name of sink.
#
# Returns:
#   0 when true, 1 when false.
is_muted_pulseaudio() {
    local sink="$1"

    muted=$(pacmd list-sinks |
                   awk -W posix '/^[ \t]+name: /{insink = $2 == "<'$sink'>"}
                                 /^[ \t]+muted: / && insink {print $2; exit}')
    [ "$muted" = "yes" ]
}

# Check if card is muted.
#
# Arguments:
#   Card        (integer) Card number to control.
#
# Returns:
#   0 when true, 1 when false.
is_muted_amixer() {
    local card="$1"
    local output

    if [ -n "$card" ]; then
        output=$(amixer -c "$card" -- sget $mixer)
    else
        output=$(amixer sget $mixer)
    fi

    status=$(echo $output | awk -W posix -F'[][]' '/dB/ { print $6 }')

    [ "$status" = "off" ]
}

# Gets an icon for the provided volume.
#
# Arguments:
#   Volume      (integer) An integer indicating the volume.
#
# Returns:
#   The volume icon name.
get_volume_icon() {
    local vol="$1"
    local icon

    if $opt_use_fullcolor_icons; then
        if [ "$vol" -ge 70 ]; then icon=${icons[1]}
        elif [ "$vol" -ge 40 ]; then icon=${icons[3]}
        elif [ "$vol" -gt 0 ]; then icon=${icons[2]}
        else icon=${icons[2]}
        fi
    else
        # Get overamplified icon if available, otherwise default to high volume icon
        if [ "$vol" -gt 100 ]; then icon=${icons_symbolic[4]:-${icons_symbolic[1]}}
        elif [ "$vol" -ge 70 ]; then icon=${icons_symbolic[1]}
        elif [ "$vol" -ge 40 ]; then icon=${icons_symbolic[3]}
        elif [ "$vol" -gt 0 ]; then icon=${icons_symbolic[2]}
        else icon=${icons_symbolic[2]}
        fi
    fi

    echo "${icon}"
}

# Display a notification indicating the volume is muted.
notify_muted() {
    local icon

    if $opt_use_fullcolor_icons; then
        icon=${icons[0]}
    else
        icon=${icons_symbolic[0]}
    fi

    if $opt_use_dunstify; then
        dunstify -i $icon -t $expires -h int:value:0 -h string:synchronous:volume "Volume muted" -r 1000
    else
        notify-send -i $icon -t $expires -h int:value:0 -h string:synchronous:volume "Volume muted" -h string:x-canonical-private-synchronous:i3-volume
    fi
}

# Display a notification indicating the current volume.
notify_volume() {
    local vol=$(get_volume)
    local icon=$(get_volume_icon "$vol")
    printf -v text "Volume %3s%%" $vol

    if $opt_show_volume_progress; then
        local progress=$(get_progress_bar "$vol")
        text="$text $progress"
    fi

    if $opt_use_dunstify; then
        dunstify -i "$icon" -t $expires -h int:value:"$vol" -h string:synchronous:volume "$text" -r 1000
    else
        notify-send -i "$icon" -t $expires -h int:value:"$vol" -h string:synchronous:volume "$text" -h string:x-canonical-private-synchronous:i3-volume
    fi
}

# Updates the status line.
#
# Arguments:
#   signal  (string) The signal used to update the status line.
#   proc    (string) The name of the status line process.
update_statusline() {
    local signal="$1"
    local proc="$2"
    pkill "-$signal" "$proc"
}

# Generates a progress bar for the provided value.
#
# Arguments:
#   Percentage      (integer) Percentage of progress.
#   Maximum         (integer) Maximum percentage. (default: 100)
#   Divisor         (integer) For calculating the ratio of blocks to progress (default: 5)
#
# Returns:
#   The progress bar.
get_progress_bar() {
    local percent="$1"
    local max_percent=${2:-100}
    local divisor=${3:-5}
    local progress=$((($percent > $max_percent ? $max_percent : $percent) / $divisor))

    printf -v bar "%*s" $progress
    echo "${bar// /â–ˆ}"
}

# Add a suffix to symbolic icon names.
apply_symbolic_icon_suffix() {
    for i in "${!icons_symbolic[@]}"; do
        icons_symbolic[$i]="${icons_symbolic[$i]}${symbolic_icon_suffix}"
    done
}

# Get the flags of the PulseAudio sink.
#
# Arguments
#   Sink name   (string) Symbolic name of sink.
get_sink_flags() {
    local sink="$1"

    pacmd list-sinks |
        awk -W posix '/^[ \t]+name: /{insink = $2 == "<'$sink'>"}
                      /^[ \t]+flags: / && insink {for(i=2;i<=NF;++i)printf $i FS; exit}'
}

# Outputs the current volume.
output_volume() {
    case "$output_mode" in
        i3blocks)
            output_volume_i3blocks
            ;;
        generic)
            output_volume_generic
            ;;
        *)
            output_volume_custom
            ;;
    esac
}

# Outputs the current volume.
output_volume_generic() {
    if is_muted; then
        echo "MUTE"
    else
        echo "$(get_volume)%"
    fi
    exit 0
}

# Outputs the current volume using a custom format string.
#
# Format options:
#   %v = volume percentage or "MUTE" when muted
output_volume_custom() {
    local format="$output_mode"

    if is_muted; then
        echo -ne "${format//\%v/MUTE}"
    else
        echo -ne "${format//\%v/$(get_volume)%}"
    fi
    exit 0
}

# Outputs the current volume for i3blocks.
output_volume_i3blocks() {
    local short_text
    local full_text

    if is_muted; then
        short_text="<span color=\"${COLOR_MUTED}\">MUTE</span>\n"
        full_text="<span color=\"${COLOR_MUTED}\">MUTE</span>\n"
    else
        local vol=$(get_volume)
        local color=$(volume_color $vol)
        short_text="<span color=\"$color\">${vol}%</span>\n"
        full_text="<span color=\"$color\">${vol}%</span>\n"
    fi

    echo -ne "${full_text}${short_text}"

    if [ -n "$max_volume" ] && [ "$vol" -gt "$max_volume" ]; then
        exit 33
    fi

    exit 0
}

# Get color for the given volume
#
# Arguments:
#   $1 - The volume
#   $2 - Maximum volume
volume_color() {
    local vol=$1

    if (( $vol >= $PA_VOLUME_MUTED && $vol < $pa_base_volume )); then
        echo "$COLOR_MUTED_TO_BASE"
    elif (( $vol >= $pa_base_volume && $vol <= $PA_VOLUME_NORM )); then
        echo "$COLOR_BASE_TO_NORM"
    elif (( $vol > $PA_VOLUME_NORM && $vol <= $max_volume )); then
        echo "$COLOR_NORM_TO_MAX"
    else
        echo "$COLOR_OTHER"
    fi
}

# Display program usage.
usage() {
    echo "Usage: $0 [options]
Control volume and related notifications.

Options:
  -a                use alsa-utils instead of pulseaudio-utils for volume control
  -c <card>         card number to control (amixer only)
  -d <amount>       decrease volume
  -e <expires>      expiration time of notifications, in milliseconds
  -i <amount>       increase volume
  -l                use fullcolor instead of symbolic icons
  -m                toggle mute
  -M <mixer>        specify mixer (ex: Headphone), default Master
  -n                show notifications
  -o <generic|i3blocks|\"format\">
                    output the volume according to the provided output format:
                        generic  = output the volume
                        i3blocks = output the volume for i3blocks
                        \"format\" = output using a format string. substitutions:
                                     %v = current volume
  -p                show text volume progress bar
  -s <sink_name>    symbolic name of sink (pulseaudio only)
  -S <suffix>       add a suffix to symbolic icon names
  -t <process_name> name of status line process. must be used with -u
  -u <signal>       update status line using signal. must be used with -t
  -v <value>        set volume
  -x <value>        set maximum volume
  -X <value>        set maximum amplification (if the device supports it. default: 2)
  -y                use dunstify instead of notify-send
  -h                display this help and exit
" 1>&2
    exit 1
}

###########################################################
# Non-command line option variables
###########################################################

icons=(
    audio-volume-muted
    audio-volume-high
    audio-volume-low
    audio-volume-medium
)

icons_symbolic=(
    audio-volume-muted-symbolic
    audio-volume-high-symbolic
    audio-volume-low-symbolic
    audio-volume-medium-symbolic
    ## Only exists in some icon sets
    # audio-volume-overamplified-symbolic
)

sink_flags=()

# Unlike in PA, PA_VOLUME_* in i3-volume are percentages instead of integers
pa_base_volume=100
PA_VOLUME_NORM=100
PA_VOLUME_MUTED=0

# Output volume colors
COLOR_MUTED=${COLOR_MUTED:-"#FFFF00"}
COLOR_MUTED_TO_BASE=${COLOR_MUTED_TO_BASE:-"#00FF00"}
COLOR_BASE_TO_NORM=${COLOR_BASE_TO_NORM:-"#FFFF00"}
COLOR_NORM_TO_MAX=${COLOR_NORM_TO_MAX:-"#FF0000"}
COLOR_OTHER=${COLOR_OTHER:-"#FFFFFF"}

###########################################################
# Command line option variables
###########################################################

opt_decrease_volume=false
opt_increase_volume=false
opt_mute_volume=false
opt_notification=false
opt_set_volume=false
opt_show_volume_progress=false
opt_use_amixer=false
opt_use_dunstify=false
opt_use_fullcolor_icons=false
card=""
mixer="Master"
signal=""
sink=""
statusline=""
volume=5
expires="1500"
max_volume=""
max_amplification="2"
symbolic_icon_suffix=""
output_mode=""

while getopts ":ac:d:e:hi:lmM:no:ps:S:t:u:v:x:X:y" o; do
    case "$o" in
        a)
            opt_use_amixer=true
            ;;
        c)
            card="${OPTARG}"
            ;;
        d)
            opt_decrease_volume=true
            volume="${OPTARG}"
            ;;
        e)
            expires="${OPTARG}"
            ;;
        i)
            opt_increase_volume=true
            volume="${OPTARG}"
            ;;
        l)
            opt_use_fullcolor_icons=true
            ;;
        m)
            opt_mute_volume=true
            ;;
        M)
            mixer="${OPTARG@Q}"
            ;;
        n)
            opt_notification=true
            ;;
        o)
            output_mode="${OPTARG}"
            ;;
        p)
            opt_show_volume_progress=true
            ;;
        s)
            sink="${OPTARG}"
            ;;
        S)
            symbolic_icon_suffix="${OPTARG}"
            ;;
        t)
            statusline="${OPTARG}"
            ;;
        u)
            signal="${OPTARG}"
            ;;
        v)
            opt_set_volume=true
            volume="${OPTARG}"
            ;;
        x)
            max_volume="${OPTARG}"
            ;;
        X)
            max_amplification="${OPTARG}"
            ;;
        y)
            opt_use_dunstify=true
            ;;
        h | *)
            usage
            ;;
    esac
done
shift $((OPTIND-1)) # Shift off options and optional --

if ! $opt_use_amixer; then
    if [ -z $sink ]; then
        sink="$(get_default_sink_name)"
    fi

    # Determine a max volume when it's not specified
    if [ -z $max_volume ]; then
        sink_flags+=( $(get_sink_flags "$sink") )
        pa_base_volume=$(get_base_volume_pulseaudio "$sink")

        # Does the sink support digital (software) amplification?
        if [[ "${sink_flags[@]}" =~ "DECIBEL_VOLUME" ]]; then
            max_volume=$(($PA_VOLUME_NORM * $max_amplification))
        else
            max_volume=$PA_VOLUME_NORM
        fi
    fi
fi

if ${opt_increase_volume}; then
    raise_volume $volume $max_volume
fi

if ${opt_decrease_volume}; then
    lower_volume $volume
fi

if ${opt_set_volume}; then
    set_volume $volume $max_volume
fi

if ${opt_mute_volume}; then
    toggle_mute $sink
fi

if [ -n "${symbolic_icon_suffix}" ]; then
    apply_symbolic_icon_suffix
fi

if [ -n "${output_mode}" ]; then
    output_volume
fi

# The options below this line must be last
if ${opt_notification}; then
    if is_muted; then
        notify_muted
    else
        notify_volume
    fi
fi

if [ -n "${signal}" ]; then
    if [ -z "${statusline}" ]; then
        usage
    fi
    update_statusline "${signal}" "${statusline}"
else
    if [ -n "${statusline}" ]; then
        usage
    fi
fi
